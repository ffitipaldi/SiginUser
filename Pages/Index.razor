@page "/"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc
@using SiginUser.Models.Consultas
@using System.Globalization
@using System.Net.Http.Json
@using SiginUser.Models.Updates
@inject SignInManager<IdentityUser> SignInManager
@inject NavigationManager navigate
@inject HttpClient http
@inject IJSRuntime js


<PageTitle>Via Rápida</PageTitle>
<!-- -------------  trace   --------------------------- -->
@if (flagMostraTrace) { Console.WriteLine(@traceMessage); }
<!-------------------------------------------------------->

@if(flagSairDaEdicao != true)
{
    @if(listDtAgendas != null)
    {
        <div class="page">
            
@*            <!------------------------->
            <!-- logotipo da Clínica -->
            <!------------------------->
            <table>
                <tr>
                    <td><img src="/images/LogoMedio.png" width="80" /></td>
                    <td>
                        <table>
                            <tr><td><img src="/images/ViaRapida.png" width="180" /></td></tr>
                            <tr><td><span><b>Clínica de Medicina e Psicologia do Trânsito</b></span></td></tr>
                        </table>
                    </td>
                </tr>
            </table>*@

            <!-------------------------------------------->
            <!-- Alerta de mensagens agendadas para hoje-->
            <!-------------------------------------------->
            <MensagemAlerta flagExibirMensagem=@flagExibirMensagem 
                            mensagemAlerta=@mensagemAlerta />

            <h3 class="mt-4">Agendamentos</h3>

            <!------------------------------------------>
            <!-- Monta Listbox com as datas agendadas -->    
            <!------------------------------------------>
            <div>
                @if (listDtAgendas == null)
                {
                    <span>Não existem agendas a serem mostradas.</span>
                }
                else
                {
                    <span>Atendimentos para </span>
                    <select class="form-control-sm" @onchange="@OnChangeDtAgenda" > 

                        //ler o array de datas com o "foreach" e monta um listbox(select)
                        @foreach (var dtAgenda in listDtAgendas)
                        {
                            //seleciona automaticamente a data corrente ou maior
                            @if (dtAgenda.DataAgenda.Date == dataSelecionada)
                            {
                                <option value="@dtAgenda.DataAgenda.ToString("yyyy-MM-dd")" selected>
                                    @dtAgenda.DataAgenda.ToString("dddd - dd/MM/yyyy",idioma)
                                </option>
                            }
                            else
                            {
                                //monta demais datas
                                <option value="@dtAgenda.DataAgenda.ToString("yyyy-MM-dd")">
                                    @dtAgenda.DataAgenda.ToString("dddd - dd/MM/yyyy",idioma)
                                </option>
                            }
                        }
                    </select>
                }

                <!------------------------------------------------------>
                <!--Botões de navegação no checkbox de agendas        -->
                <!------------------------------------------------------>
                @*<a class="btn btn-lg" @onclick="@(()=> MudarLinha(-1))">
                    <span class="oi oi-arrow-circle-left" aria-hidden="true"></span>
                </a>
                <a class="btn btn-lg" @onclick="@(()=> MudarLinha(1))">
                    <span class="oi oi-arrow-circle-right" aria-hidden="true"></span>
                </a>*@

                <!------------------------------------------------------>
                <!--Nova Agenda chama edição com Id=0                 -->
                <!------------------------------------------------------>
                <a class="btn btn-info float-end" @onclick="@(()=> EditarLinha(0))">
                    <span class="oi oi-plus" aria-hidden="true"></span> 
                </a>
            </div>

            <!------------------------------------------------------>
            <!--lista os agendamentos marcados na data específica -->
            <!------------------------------------------------------>
            @if (listResumoAgendas != null)
            {
                <div class="row">

                    <!-- Detalhe dos agendamentos  -->
                    <div class="col-sm">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th scope="col"></th>
                                    <th scope="col">Hora</th>
                                    <th scope="col">Cliente</th>
                                    <th scope="col">Telefone</th>
                                    <th scope="col">Obs</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach(var linhaAgenda in listResumoAgendas)
                                {
                                    <!--determina a cor da linha de acordo com o status-->
                                    @if(linhaAgenda.StatusExPsicoSigla == "REALIZADO") trcolor = "forestgreen"; 
                                    else @if(linhaAgenda.StatusExPsicoSigla == "RETESTE") trcolor = "cadetblue"; 
                                    else @if(linhaAgenda.StatusExPsicoSigla == "AREALIZAR") trcolor = "black"; 
                                    else @if(linhaAgenda.StatusExPsicoSigla == "CANCELADO") trcolor = "red"; 
                                    else @if(linhaAgenda.StatusExPsicoSigla == "REAGENDADO") trcolor = "blue";   

                                    <!--desenha a tabela de linhas da agenda-->
                                    <tr style="color:@trcolor" @onclick="@(()=> EditarLinha(linhaAgenda.IdAgenda))">
                                        <td>
                                            @if (linhaAgenda.FlagCandidatoCompareceu)
                                            {
                                                <input  class="form-check-input" 
                                                        type="checkbox" 
                                                        value=@linhaAgenda.FlagCandidatoCompareceu 
                                                        @onclick="@(()=> MarcarCompareceu(linhaAgenda.IdAgenda, linhaAgenda.FlagCandidatoCompareceu))"
                                                        checked
                                                        />
                                            }
                                            else
                                            {
                                                <input  class="form-check-input" 
                                                        type="checkbox" 
                                                        value=@linhaAgenda.FlagCandidatoCompareceu 
                                                        @onclick="@(()=> MarcarCompareceu(linhaAgenda.IdAgenda, linhaAgenda.FlagCandidatoCompareceu))"
                                                        />                                                
                                            }
                                        </td>
                                        <td>@linhaAgenda.HoraAgenda</td>
                                        <td>@linhaAgenda.NomeCandidato</td>
                                        <td>@linhaAgenda.Telefone</td>
                                        <td>@if(linhaAgenda.StatusExPsicoSigla == "REALIZADO")
                                                {<span class="oi oi-thumb-up me-2" aria-hidden="true"> Reallizado</span>}
                                            else @if(linhaAgenda.StatusExPsicoSigla == "RETESTE")
                                                {<span class="oi oi-thumb-down me-2" aria-hidden="true"> Reteste</span>}
                                            else @if(linhaAgenda.StatusExPsicoSigla == "AREALIZAR")
                                                {<span class="oi oi-target me-2" aria-hidden="true"> A realizar </span>}
                                            else @if(linhaAgenda.StatusExPsicoSigla == "CANCELADO")
                                                {<span class="oi oi-circle-x me-2" aria-hidden="true"> Cancelado</span>}                                        
                                            else @if(linhaAgenda.StatusExPsicoSigla == "REAGENDADO")
                                                {<span class="oi oi-loop-circular me-2" aria-hidden="true"> Reagendado</span>}   
                                        </td>
                                     </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        </div>
    }
}

@code
{
    CultureInfo idioma = new CultureInfo("pt-BR");
    private string TipoPerfil = "Psicólogo";    
    private string CpfProfisional = "19346827807";
    private string UserName = "Fernando Fitipaldi";
    public string mensagemAlerta = "Existem agendamentos marcados hoje para você!";
    public bool flagExibirMensagem = false;
    public bool flagSairDaEdicao = false;
    public DateTime dataSelecionada;
    public string? trcolor;
    private string? dataAgendaSessionStorage;
    public string? traceMessage ="##Início##";
    public bool flagDesabilitaEdicao = false;
    public bool flagMostraTrace = false;
    public string? httpDiretorioBase = "https://localhost:7037/";

    [CascadingParameter]
    private Task <AuthenticationState> _authState { get; set; }
    private AuthenticationState authState;

    //instancia uma lista da classe "DataAgendas" no objeto "listDtAgendas"
    public DataAgendas[]? listDtAgendas { get; set; }

    //instancia um array do Resumo Agenda no objeto listResumoAgendas
    public ResumoAgendas[]? listResumoAgendas { get; set; } 

    //instancia um array da classe Agenda no objeto listAgendas - não usado
    public SiginUser.Models.Agenda[]? listAgendas { get; set; } 

    //instancia a classe Dominio como objeto flagMostraTrace
    public SiginUser.Models.Dominio[]? cfgMostraTrace { get; set; }

    //instancia um objeto para alterar a flagCandidadtoCompareceu
    public SiginUser.Models.Updates.UpdateFlagCompareceu? objFlagCampareceu { get; set; }

    /// ---------------------------------------------------------
    /// <summary>
    /// carrega o listbox com as datas das agendas
    /// </summary>
    /// <returns></returns>
    /// ---------------------------------------------------------
    /// 
    protected override async Task OnInitializedAsync()
    {
        traceMessage = traceMessage + " | " + "Entrando OnInitializedAsync";

        //estado de autenticação do usuário
        authState = await _authState;
        if (authState.User.Identity.IsAuthenticated == false)
        {
            navigate.NavigateTo("/Identity/Account/Login");
        }

        traceMessage = traceMessage + " | " + "Saindo";
    }



    /// ---------------------------------------------------------------
    /// <summary>
    /// Inicializa as variáveis do session store
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    /// ---------------------------------------------------------------
    /// 
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            traceMessage = traceMessage + " | " + $"Entrando OnAfterRenderAsync com firstRender = {firstRender}";

            //recupera data do session storage
            dataAgendaSessionStorage = await js.InvokeAsync<string>("GetFromSessionStorage", "dataSelecionadaToList");
            if (dataAgendaSessionStorage == null) dataAgendaSessionStorage = "";

            traceMessage = traceMessage + " | " + $"dataAgendaSessionStorage = {dataAgendaSessionStorage}";

            //ler a flagMostraTrace
            if (http.BaseAddress == null) { http.BaseAddress = new Uri("https://localhost:7037/"); }
            cfgMostraTrace = await http.GetFromJsonAsync<SiginUser.Models.Dominio[]>("api/dominio/GetDominiosByCampo/cfgMostraTrace");
            flagMostraTrace = Convert.ToBoolean(cfgMostraTrace[0].Sigla);

            //carrega as datas das agendas
            await GetDatasAgendas();
            VerificaAgendaParaHoje();
            await GetResumoAgendasByCpfData(CpfProfisional, dataSelecionada.ToString("yyyy-MM-dd"), dataSelecionada.ToString("yyyy-MM-dd"));

            traceMessage = traceMessage + " | " + "Saindo";

            //avisa ao sistema para renderizar a tela
            StateHasChanged();
        }
    }


    /// -----------------------------------------------------------------
    /// <summary>
    /// Salva a variavel no session store 
    /// </summary>
    /// <returns></returns>
    /// -----------------------------------------------------------------
    /// 
    private async Task SaveSessionData() 
    {
        traceMessage = traceMessage + " | Entrando SaveSessionData";

        var tempdata = dataSelecionada.ToString("yyyy-MM-dd");
        await js.InvokeVoidAsync("SaveToSessionStorage","dataSelecionadaToList", tempdata);

        traceMessage = traceMessage + " | Saindo";
    }



    /// --------------------------------------------------
    /// <summary>
    /// chama a API para carga das datas das agendas
    /// </summary>
    /// <returns></returns>
    /// --------------------------------------------------
    /// 
    async Task GetDatasAgendas()
    {
        traceMessage = traceMessage + " | " + "Entrando GetDatasAgendas";

        //ler do banco e carrega o objeto "listDtAgendas"
        if (http.BaseAddress == null) { http.BaseAddress = new Uri("https://localhost:7037/"); }
        listDtAgendas = await http.GetFromJsonAsync<DataAgendas[]>($"api/servicos/GetDataAgendasByCpf/{CpfProfisional}");  

        traceMessage = traceMessage + " | " + "Saindo";
    }


    ///--------------------------------------------------------
    /// <summary>
    /// verifica se tem agenda para hoje e marca no listbox
    /// </summary>
    ///--------------------------------------------------------
    ///
    void VerificaAgendaParaHoje()
    {
        traceMessage = traceMessage + " | " + "Entrando VerificaAgendaParaHoje";

        if (dataAgendaSessionStorage != null && dataAgendaSessionStorage != "")
        {
            flagExibirMensagem = false;
            dataSelecionada = DateTime.Parse(dataAgendaSessionStorage);
        }
        else
        {
            DateTime dtCorrente = DateTime.Now.Date;
            foreach (var dtAgenda in listDtAgendas)
            {
                if (dtAgenda.DataAgenda.Date == dtCorrente)
                {
                    flagExibirMensagem = true;
                    mensagemAlerta = "Você tem agendamentos marcados para hoje!";
                    dataSelecionada = dtAgenda.DataAgenda;
                    break;
                }
                if (dtAgenda.DataAgenda.Date > dtCorrente)
                {
                    flagExibirMensagem = false;
                    dataSelecionada = dtAgenda.DataAgenda;
                    break;
                }
            }            
        }

        traceMessage = traceMessage + " | " + "Saindo";

    }


    ///--------------------------------------------------------
    /// <summary>
    /// Rotina de troca de datas no listbox
    /// </summary>
    /// <param name="changeEventArgs"></param>
    /// <returns></returns>
    ///--------------------------------------------------------
    ///
    async Task OnChangeDtAgenda(ChangeEventArgs changeEventArgs)
    {
        dataSelecionada = Convert.ToDateTime(changeEventArgs.Value.ToString());
        await GetResumoAgendasByCpfData(CpfProfisional, changeEventArgs.Value.ToString(), changeEventArgs.Value.ToString());
    }


    ///--------------------------------------------------------
    /// <summary>
    /// Carrega lista de resumos de agendas
    /// </summary>
    /// <param name="cpfProfissional"></param>
    /// <param name="dtAgendaDe"></param>
    /// <param name="dtAgendaAte"></param>
    /// <returns></returns>
    ///--------------------------------------------------------
    ///
    async Task GetResumoAgendasByCpfData(string cpfProfissional, string dtAgendaDe, string dtAgendaAte)
    {
        traceMessage = traceMessage + " | " + "Entrando GetResumoAgendasByCpfData";

        //ler do banco e carrega o array de resumo de agendas
        if (http.BaseAddress == null) { http.BaseAddress = new Uri("https://localhost:7037/"); }
        listResumoAgendas = await http.GetFromJsonAsync<ResumoAgendas[]>($"api/servicos/GetResumoAgendasByCpfData/{cpfProfissional}/{dtAgendaDe}/{dtAgendaAte}");  

        traceMessage = traceMessage + " | " + "Saindo";
    }


    ///--------------------------------------------------------
    /// <summary>
    /// Pesquisa agenda pela data selecionada
    /// </summary>
    /// <param name="cpfProfissional"></param>
    /// <param name="dtAgendaDe"></param>
    /// <param name="dtAgendaAte"></param>
    /// <returns></returns>
    ///--------------------------------------------------------
    ///
    async Task GetAgendasByCpfData(string cpfProfissional, string dtAgendaDe, string dtAgendaAte)
    {
        traceMessage = traceMessage + " | " + "Entrando GetAgendasByCpfData";

        //ler do banco e carrega o array de agendas
        if (http.BaseAddress == null) { http.BaseAddress = new Uri("https://localhost:7037/"); }
        listAgendas = await http.GetFromJsonAsync<SiginUser.Models.Agenda[]>($"api/agenda/GetAgendasByCpfData/{cpfProfissional}/{dtAgendaDe}/{dtAgendaAte}");  

        traceMessage = traceMessage + " | " + "Saindo";
    }


    ///--------------------------------------------------------
    /// <summary>
    /// desliga a mensagem de alerta
    /// </summary>
    ///--------------------------------------------------------
    ///
    void DesligaMensagemAlerta()
    {
        flagExibirMensagem = false;
    }


    /// -------------------------------------------------
    /// <summary>
    /// Editar linha da agenda
    /// </summary>
    /// <param name="agendaId"></param>
    /// <returns></returns>
    /// ------------------------------------------------
    ///
    private async Task EditarLinha(int agendaId)
    {
        if (flagDesabilitaEdicao)
        {
            flagDesabilitaEdicao = false;
        }
        else
        {
            flagSairDaEdicao = true;
            await SaveSessionData();
            await js.InvokeVoidAsync("SaveToSessionStorage", "rotaretorno", "/");
            navigate.NavigateTo($"agenda/editar/{agendaId}");
        }
    }

    /// ---------------------------------------------
    /// <summary>
    /// Marca ou desmarca se o candidato compareceu
    /// </summary>
    /// <param name="agendaId"></param>
    /// <param name="flagComprareceu"></param>
    /// <returns></returns>
    /// ---------------------------------------------
    /// 
    private async Task MarcarCompareceu(int agendaId, bool flagComprareceu)
    {
        UpdateFlagCompareceu oFlg = new UpdateFlagCompareceu();
        flagDesabilitaEdicao = true;
        flagComprareceu = !flagComprareceu;

        oFlg.IdAgenda = agendaId;
        oFlg.FlagCandidatoComprareceu = flagComprareceu;

        //atualiza a flag na agenda
        if (http.BaseAddress == null) { http.BaseAddress = new Uri("https://localhost:7037/"); }
        await http.PutAsJsonAsync($"api/servicos/UpdateFlagCompareceuById/{agendaId}",oFlg);
    }

    
    private async void MudarLinha(int incremento)
    {
        await js.InvokeVoidAsync("alert", "recebido parametro " + incremento.ToString());
    }
}