@page "/"
@using Microsoft.AspNetCore.Identity
@using SiginUser.Models.Consultas
@using System.Globalization
@inject SignInManager<IdentityUser> SignInManager
@inject NavigationManager navigation
@inject HttpClient http

<PageTitle>Via Rápida</PageTitle>

@if(listDtAgendas != null)
{
    <div class="page">

        <!-- logotipo da Clínica -->
        <table>
            <tr>
                <td><img src="/images/LogoMedio.png" width="80" /></td>
                <td>
                    <table>
                        <tr><td><img src="/images/ViaRapida.png" width="180" /></td></tr>
                        <tr><td><span><b>Clínica de Medicina e Psicologia do Trânsito</b></span></td></tr>
                    </table>
                </td>
            </tr>
        </table>

        <!-- Alerta de mensagens agendadas para hoje-->
        <MensagemAlerta flagExibirMensagem=@flagExibirMensagem 
                        mensagemAlerta=@mensagemAlerta />

        <h3 class="mt-4">Agendamentos</h3>

        <!-- Monta Listbox com as datas agendadas -->    
        <div>
            @if (listDtAgendas == null)
            {
                <span>Não existem agendas a serem mostradas.</span>
            }
            else
            {
                <span>Atendimentos agendados para </span>
                <select class="form-control-sm" @bind="dataSelecionada">

                    //ler o array de datas com o "foreach" e monta um listbox(select)
                    @foreach (var dtAgenda in listDtAgendas)
                    {
                        //seleciona automaticamente a data corrente
                        @if (dtAgenda.DataAgenda.Date == DateTime.Now.Date)
                        {
                            <option value="@dtAgenda.DataAgenda" selected>
                                @dtAgenda.DataAgenda.ToString("dddd - dd/MM/yyyy",idioma)
                            </option>
                            flagExibirMensagem = true;
                            mensagemAlerta = "Atenção! Você tem agendamentos marcados para hoje!";
                        }
                        else
                        {
                            //monta demais datas
                            <option value="@dtAgenda.DataAgenda">
                                @dtAgenda.DataAgenda.ToString("dddd - dd/MM/yyyy",idioma)
                            </option>
                        }
                    }
                </select>
            }
        </div>

        <!-- conta quantas vezes passa por aqui-->
        @if (1 == 1) 
        {   
            conta = conta + 1;
            dtsel = dtsel + " | " + dataSelecionada.ToString("d");
        }
        Passei por aqui @conta vezes com as datas @dtsel

        <!--lista os agendamentos marcados na data específica -->
        <Agendamentos />

    </div>
}
<!-- lista o estado de autentiação do usuário -->
@*@if(@authState.User.Identity.IsAuthenticated)
{
	<div><p><b>authState:</b>@authState</p></div>
	<div class="row">
		<div class="col-6"><p><b>Nome:</b> @authState.User.Identity.Name</p></div>
		<div class="col-6"><p><b>Autenticado:</b> @authState.User.Identity.IsAuthenticated</p></div>
	</div>
			
	@foreach (var claim in authState.User.Claims)
	{   <div class="row">
			<div class="col-6"><p><b>Claim Type:</b> @claim.Type</p></div> 
			<div class="col-6"><p><b>Claim Value:</b> @claim.Value</p></div>
		</div>
	}
}*@
@code
{
    CultureInfo idioma = new CultureInfo("pt-BR");
    private string TipoPerfil = "Psicólogo";    
    private string CpfProfisional = "25586149400";
    private string UserName = "Fernando Fitipaldi";
    public string mensagemAlerta = "Existem agendamentos marcados hoje para você!";
    public bool flagExibirMensagem = false;
    public DateTime dataSelecionada;
    public int conta;
    public string? dtsel;

    [CascadingParameter]
    private Task
    <AuthenticationState> _authState { get; set; }
    private AuthenticationState authState;

    //instancia uma lista da classe "DataAgendas" no objeto "listDtAgendas"
    DataAgendas[]? listDtAgendas { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //estado de autenticação do usuário
        authState = await _authState;
        if (authState.User.Identity.IsAuthenticated == false)
        {
            navigation.NavigateTo("/Identity/Account/Login", true);
        }

        //carrega as datas das agendas
        await GetDatasAgendas();
        VerificaAgendaParaHoje();
    }
    async Task GetDatasAgendas()
    {
        //ler do banco e carrega o objeto "listDtAgendas"
        http.BaseAddress = new Uri("https://localhost:7037/");
        listDtAgendas = await http.GetFromJsonAsync<DataAgendas[]>($"api/servicos/GetDataAgendasByCpf/{CpfProfisional}");  
    }

    void VerificaAgendaParaHoje()
    {
        foreach (var dtAgenda in listDtAgendas)
        {
            if (dtAgenda.DataAgenda.Date == DateTime.Now.Date)
            {
                flagExibirMensagem = true;
                mensagemAlerta = "Você tem agendamentos marcados para hoje!";
                dataSelecionada = dtAgenda.DataAgenda;
            }
        }
    }

    void DesligaMensagemAlerta()
    {
        flagExibirMensagem = false;
    }
}