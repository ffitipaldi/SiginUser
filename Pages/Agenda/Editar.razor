@page "/agenda/editar/{agendaId:int}"
@using SiginUser.Models
@using SiginUser.Models.Consultas
@using SiginUser.Pages.Dominio
@inject HttpClient  http
@inject NavigationManager navigate
@inject IJSRuntime js


@if(agendaId == 0)
{
    <PageTitle>Nova Agenda</PageTitle>
    <h2>Nova Agenda</h2>
    
    
    //inicializa campos da agenda
    agenda.TipoPerfil = "PSICO";
    agenda.CpfProfissional = "19346827807";
    if(agenda.DataAgenda == new DateTime(0001, 01, 01)) agenda.DataAgenda = DateTime.Now.Date;
    agenda.StatusExMedico = "AREALIZ";
    //agenda.DataAgendaDetran = agenda.DataAgenda;
    //agenda.HoraAgendaDetran = agenda.HoraAgenda;

    // abre linha para colar a agenda do Detran
    <div>
        <div class="form-group mb-2">
            <input type="txt" @bind="@importagendatxt.CampoAgendaTxt" class="form-control" style="font-size: 14px;" placeholder="Cole a linha da agenda do Detran."/>
        </div>
        <div class="form-group mb-2 float-end">          
            <button type="button" @onclick="FormFormataAgendaTxt" class="btn btn-outline-primary">
                <span class="oi oi-account-login me-2" aria-hidden="true"/>
                <span class="oi oi-align-left me-2" aria-hidden="true"/>
            </button>
        </div>
    </div>
    <br />    
    <br />
}
else
{
    <PageTitle>Editar Agenda</PageTitle>
    <h2>Editar Agenda</h2>
}

<!--formulário de edição para detalhamento, inclusão, alteração e exclusão -->
@if (listStatusExames != null)
{
    <EditForm Model="@agenda" OnValidSubmit="@SalvarEdicaoAgenda">
        <DataAnnotationsValidator />

        <div class="row">
            <div class="col form-group">
                <label form="DataAgenda" style="color:gray">Data da Agenda</label>
                <div>
                    <InputDate @bind-Value="@agenda.DataAgenda" class="form-control" />
                    <ValidationMessage For="@(()=>agenda.DataAgenda)" />
                </div>
            </div>
            <div class="col form-group">
                <label style="color:gray">Hora da Agenda</label>
                <div>
                    <InputText @bind-Value="@agenda.HoraAgenda" class="form-control" />
                    <ValidationMessage For="@(()=>agenda.HoraAgenda)" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="form-group col-md-6">
                <label style="color:gray">Nome do Candidato</label>
                <div>
                    <InputText @bind-Value="@agenda.NomeCandidato" class="form-control text-uppercase" />
                    <ValidationMessage For="@(()=>agenda.NomeCandidato)" />
                </div>
            </div>
            <div class="form-group col-md-6">
                <label style="color:gray">E-mail</label>
                <div>
                    <InputText @bind-Value="@agenda.EmailCandidato" class="form-control" />
                    <ValidationMessage For="@(()=>agenda.EmailCandidato)" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="form-group col">
                <label style="color:gray">Telefone</label>
                <div>
                    <InputText @bind-Value="@agenda.Telefone" class="form-control" />
                    <ValidationMessage For="@(()=>agenda.Telefone)" />
                </div>
            </div>
            <div class="form-group col">
                <label style="color:gray">Cpf do Candidato</label>
                <div>
                    <InputText @bind-Value="@agenda.CpfCandidato" class="form-control" />
                    <ValidationMessage For="@(()=>agenda.CpfCandidato)" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col form-group">
                <label style="color:gray">Procedimento</label>
                <div>
                    <InputSelect @bind-Value="agenda.TipoProcesso" class="form-control-sm">
                        <option value="">Escolha uma opção</option>
                        @foreach (var tpprocesso in listTipoProcessos)
                        {
                            <option value="@tpprocesso.Sigla">@tpprocesso.Descricao</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(()=>agenda.TipoProcesso)" />
                </div>
            </div>
            <div class="col form-group">
                <label style="color:gray">Categoria</label>
                <div>
                    <InputText @bind-Value="@agenda.Categoria" class="form-control" />
                    <ValidationMessage For="@(()=>agenda.Categoria)" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="form-group col">
                <label style="color:gray">Status Exame</label>
                <div>
                    <InputSelect @bind-Value="agenda.StatusExPsico" class="form-control-sm">
                        <option value="">Escola uma opção</option>
                        @foreach (var stexame in listStatusExames)
                        {
                            <option value="@stexame.Sigla">@stexame.Descricao</option>
                        }
                        </InputSelect>
                    <ValidationMessage For="@(()=>agenda.StatusExPsico)" />
                </div>
            </div>
            <div class="form-group col">
                <label style="color:gray">Data Original Detran</label>
                <div>
                    <InputDate @bind-Value="@agenda.DataAgendaDetran" class="form-control" readonly="readonly" />
                    <ValidationMessage For="@(()=>agenda.DataAgendaDetran)" />
                </div>
            </div>
        </div>
        <div class="form-group">
            <label style="color:gray">Observação</label>
            <div>
                <InputText @bind-Value="@agenda.Observacao" class="form-control" />
                <ValidationMessage For="@(()=>agenda.Observacao)" />
            </div>
        </div>
        <br/>
        <button type="submit" class="btn btn-success">Salvar</button>
        <button class="btn btn-danger" @onclick="@ExcluirAgenda">Excluir</button>
        <button class="btn btn-outline-dark" @onclick="@RetornaAgenda">Retornar</button>
    </EditForm>
}
@code {

    [Parameter] public int agendaId { get; set; }               //parametro "agendaId"
    ImportAgendaTxt importagendatxt = new ImportAgendaTxt();    //campo string da linha importada
    private string[]? Campos;                                   //campos split da linha
    private int i = 0;                                          //campo auxiliar

    //flag utilizada para sair da edição ao se utilizar o NavigateTO
    private bool flagSairDaEdicao = false;

    //instancia a classe Agenda no objeto agenda
    Agenda agenda = new Agenda();

    //instancia a classe Dominio como objeto listStatusExames
    public Dominio[]? listStatusExames { get; set; }

    //instancia a classe Dominio como objeto listStatusExames
    public Dominio[]? listTipoProcessos { get; set; }

    //data anterior a edição
    public DateTime dataAgendaAntes;

    /// -------------------------------------------------
    /// <summary>
    /// carrega os dados da agenda passados pelo IdAgenda
    /// </summary>
    /// <returns></returns>
    /// --------------------------------------------------
    /// 
    protected async override Task OnParametersSetAsync()
    {
        //ler os dados do domínio a ser editado
        if (http.BaseAddress == null) { http.BaseAddress = new Uri("https://localhost:7037/"); }

        //carrega listbox com os status dos exames
        listStatusExames = await http.GetFromJsonAsync<Dominio[]>("api/dominio/GetDominiosByCampo/StatusExame");

        //carrega listbox com os tipos de processos
        listTipoProcessos = await http.GetFromJsonAsync<Dominio[]>("api/dominio/GetDominiosByCampo/TipoProcesso");

        if( agendaId > 0)
        {
            agenda = await http.GetFromJsonAsync<Agenda>($"api/agenda/GetAgendaById/{agendaId}");
            dataAgendaAntes = agenda.DataAgenda;
        }
    }


    /// --------------------------------------------
    /// <summary>
    /// salva os dados editados da agenda
    /// </summary>
    /// <returns></returns>
    /// --------------------------------------------
    /// 
    async Task SalvarEdicaoAgenda()
    {
        string hora;
        string minuto;
        int tamanho;
        int posdoispontos;

        //ajusta nome para caixa alta
        agenda.NomeCandidato = agenda.NomeCandidato.ToUpper();

        //ajusta hora para formato padrão hh:mm
        posdoispontos = agenda.HoraAgenda.IndexOf(":");
        tamanho = agenda.HoraAgenda.Length;                

        if (posdoispontos == -1)
        {
            if (tamanho == 1) {
                hora = "0" + agenda.HoraAgenda;
                minuto = "00";
                agenda.HoraAgenda = hora + ":" + minuto;
            } 
            else if (tamanho == 2) {
                hora = agenda.HoraAgenda;
                minuto = "00";
                agenda.HoraAgenda = hora + ":" + minuto;
            }
            else if(tamanho == 4)
            {
                hora = agenda.HoraAgenda.Substring(0,2);
                minuto = agenda.HoraAgenda.Substring(2,2);
                agenda.HoraAgenda = hora + ":" + minuto;
            }
        }
        else
        {   if(posdoispontos == 1){
                hora = "0" + agenda.HoraAgenda.Substring(0,1);
                minuto = agenda.HoraAgenda.Substring(2, 2);
                agenda.HoraAgenda = hora + ":" + minuto;
            }   
            else if(posdoispontos == 2){
                hora = agenda.HoraAgenda.Substring(0,2);
                minuto = agenda.HoraAgenda.Substring(3, 2);
                agenda.HoraAgenda = hora + ":" + minuto;
            }
        }

        //retira pontuação no cpf
        agenda.CpfCandidato = agenda.CpfCandidato.Replace(".", "");
        agenda.CpfCandidato = agenda.CpfCandidato.Replace("-", "");

        if (agendaId == 0)
        {
            //inclui
            agenda.StatusExMedico = "AREALIZ";
            agenda.DataAgendaDetran = agenda.DataAgenda;
            agenda.HoraAgendaDetran = agenda.HoraAgenda;

            await http.PostAsJsonAsync("api/agenda/AddAgenda", agenda);
        }
        else
        {
            //altera a DataAgenda para conter a hora
            agenda.DataAgenda = DateTime.Parse(agenda.DataAgenda.ToString("yyyy-MM-dd") + "T" + agenda.HoraAgenda + ":00");

            //verifia se houve Reagendamento
            if((agenda.StatusExPsico != "APTO" && agenda.StatusExPsico != "INAPTO") && dataAgendaAntes != agenda.DataAgenda)
            {
                agenda.StatusExPsico = "REAGENDADO";
            }

            //altera
            await http.PutAsJsonAsync($"api/agenda/UpdateAgendaById/{agendaId}", agenda);
        }

        //navega de volta para a página index
        await js.InvokeAsync<object>($"jsFunctions.NavegarPara", "/");
    }


    /// ----------------------------------------------
    /// <summary>
    /// exclui a agenda mostrada na tela
    /// </summary>
    /// <returns></returns>
    /// ----------------------------------------------
    /// 
    async Task ExcluirAgenda()
    {
        //exclui
        var respExcluir = await js.InvokeAsync<bool>("confirm", "Confirma a exclusão?");
        if (respExcluir)
        {
            await http.DeleteAsync($"api/agenda/DeleteAgendaById/{agendaId}");
            await js.InvokeVoidAsync("alert", "Registro excluído com sucesso.");
        }
        await js.InvokeAsync<object>("jsFunctions.NavegarPara", "/");
    }


    /// ----------------------------------------------
    /// <summary>
    /// retorna a tela anterior
    /// </summary>
    /// <returns></returns>
    /// ----------------------------------------------
    /// 
    async Task RetornaAgenda()
    {
        //exclui
        await js.InvokeAsync<object>("jsFunctions.NavegarPara", "/");
        await js.InvokeAsync<object>("js.Alerta", "Depois do Navigate");
    }

    async Task FormFormataAgendaTxt()
    {
        if(importagendatxt.CampoAgendaTxt.Length > 30)
        {
            //split da linha nos campos
            Campos = importagendatxt.CampoAgendaTxt.Split("\t");

            //formata campos
            agenda.TipoPerfil = "PSICO";
            agenda.CpfProfissional = "19346827807";
            if(agenda.DataAgenda == new DateTime(0001, 01, 01)) agenda.DataAgenda = DateTime.Now.Date;
            agenda.HoraAgenda = Campos[0];
            agenda.DataAgendaDetran = agenda.DataAgenda;
            agenda.HoraAgendaDetran = agenda.HoraAgenda;
            agenda.CpfCandidato = Campos[1].Replace(".","");
            agenda.CpfCandidato = agenda.CpfCandidato.Replace("-","");
            agenda.NomeCandidato = Campos[2];
            agenda.Telefone = Campos[3];
            if(Campos[4] != "" && Campos[4] != "NÃO INFORMADO") agenda.EmailCandidato = Campos[4];
            agenda.TipoProcesso = Campos[5];
            agenda.Categoria = Campos[6];
            agenda.StatusExMedico = "AREALIZ";
            agenda.StatusExPsico = "AREALIZ";

        }
    }
}
