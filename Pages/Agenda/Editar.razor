@page "/agenda/editar/{agendaId:int}"
@using SiginUser.Models
@inject HttpClient  http
@inject NavigationManager navigate
@using SiginUser.Models.Consultas
@using SiginUser.Pages.Dominio

@if(agendaId == 0)
{
    <PageTitle>Nova Agenda</PageTitle>
    <h2>Nova Agenda</h2>
}
else
{
    <PageTitle>Editar Agenda</PageTitle>
    <h2>Editar Agenda</h2>
}

<!--formulário de edição para detalhamento, inclusão, alteração e exclusão -->
@if (listStatusExames != null)
{
    <EditForm Model="@agenda" OnValidSubmit="@SalvarEdicaoAgenda">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label form="DataAgenda" style="color:gray">Data da Agenda</label>
            <div>
                <InputDate @bind-Value="@agenda.DataAgenda" class="form-control" />
                <ValidationMessage For="@(()=>agenda.DataAgenda)" />
            </div>
        </div>
        <div class="form-group">
            <label style="color:gray">Hora da Agenda</label>
            <div>
                <InputText @bind-Value="@agenda.HoraAgenda" class="form-control" />
                <ValidationMessage For="@(()=>agenda.HoraAgenda)" />
            </div>
        </div>
        <div class="form-group">
            <label style="color:gray">Nome do Candidato</label>
            <div>
                <InputText @bind-Value="@agenda.NomeCandidato" class="form-control text-uppercase" />
                <ValidationMessage For="@(()=>agenda.NomeCandidato)" />
            </div>
        </div>
        <div class="form-group">
            <label style="color:gray">Telefone</label>
            <div>
                <InputText @bind-Value="@agenda.Telefone" class="form-control" />
                <ValidationMessage For="@(()=>agenda.Telefone)" />
            </div>
        </div>
        <div class="form-group">
            <label style="color:gray">Procedimento</label>
            <div>
                <InputSelect @bind-Value="agenda.TipoProcesso" class="form-control-sm">
                @foreach (var tpprocesso in listTipoProcessos)
                {
                    <option value="@tpprocesso.Sigla">@tpprocesso.Descricao</option>
                }
                </InputSelect>
                <ValidationMessage For="@(()=>agenda.TipoProcesso)" />
            </div>
        </div>
        <div class="form-group">
            <label style="color:gray">Status Exame</label>
            <div>
                <InputSelect @bind-Value="agenda.StatusExPsico" class="form-control-sm">
                @foreach (var stexame in listStatusExames)
                {
                    <option value="@stexame.Sigla">@stexame.Descricao</option>
                }
                </InputSelect>
                <ValidationMessage For="@(()=>agenda.StatusExPsico)" />
            </div>
        </div>
        <div class="form-group">
            <label form="DataAgenda" style="color:gray">Data Original Detran</label>
            <div>
                <InputDate @bind-Value="@agenda.DataAgendaDetran" class="form-control" readonly="readonly" />
                <ValidationMessage For="@(()=>agenda.DataAgendaDetran)" />
            </div>
        </div>
        <br/>
        <button type="submit" class="btn btn-success">Salvar</button>
        <button class="btn btn-danger" @onclick="@ExcluirAgenda">Excluir</button>
        <button class="btn btn-outline-dark" @onclick="@RetornaAgenda">Retornar</button>
    </EditForm>
}
@code {

    [Parameter]
    public int agendaId { get; set; }

    //flag utilizada para sair da edição ao se utilizar o NavigateTO
    private bool flagSairDaEdicao = false;

    //instancia a classe Agenda no objeto agenda
    Agenda agenda = new Agenda();

    //instancia a classe Dominio como objeto listStatusExames
    public Dominio[]? listStatusExames { get; set; }

    //instancia a classe Dominio como objeto listStatusExames
    public Dominio[]? listTipoProcessos { get; set; }

    //data anterior a edição
    public DateTime dataAgendaAntes;

    /// -------------------------------------------------
    /// <summary>
    /// carrega os dados da agenda passados pelo IdAgenda
    /// </summary>
    /// <returns></returns>
    /// --------------------------------------------------
    /// 
    protected async override Task OnParametersSetAsync()
    {
        //ler os dados do domínio a ser editado
        if (http.BaseAddress == null) { http.BaseAddress = new Uri("https://localhost:7037/"); }

        //carrega listbox com os status dos exames
        listStatusExames = await http.GetFromJsonAsync<Dominio[]>("api/dominio/GetDominiosByCampo/StatusExame");

        //carrega listbox com os tipos de processos
        listTipoProcessos = await http.GetFromJsonAsync<Dominio[]>("api/dominio/GetDominiosByCampo/TipoProcesso");

        if( agendaId > 0)
        {
            agenda = await http.GetFromJsonAsync<Agenda>($"api/agenda/GetAgendaById/{agendaId}");
            dataAgendaAntes = agenda.DataAgenda;
        }
    }


    /// --------------------------------------------
    /// <summary>
    /// salva os dados editados da agenda
    /// </summary>
    /// <returns></returns>
    /// --------------------------------------------
    /// 
    async Task SalvarEdicaoAgenda()
    {
        string hora;
        string minuto;
        int tamanho;
        int posdoispontos;

        //salva o objeto dominio editado
        if (flagSairDaEdicao == false)
        {
            if (agendaId == 0)
            {
                //inclui
                await http.PostAsJsonAsync("api/agenda/AddAgenda", agenda);
            }
            else
            {
                //ajusta nome para caixa alta
                agenda.NomeCandidato = agenda.NomeCandidato.ToUpper();

                //ajusta hora para formato padrão hh:mm
                posdoispontos = agenda.HoraAgenda.IndexOf(":");
                tamanho = agenda.HoraAgenda.Length;                

                if (posdoispontos == -1)
                {
                    if (tamanho == 1) {
                        hora = "0" + agenda.HoraAgenda;
                        minuto = "00";
                        agenda.HoraAgenda = hora + ":" + minuto;
                    } 
                    else if (tamanho == 2) {
                        hora = agenda.HoraAgenda;
                        minuto = "00";
                        agenda.HoraAgenda = hora + ":" + minuto;
                    }
                    else if(tamanho == 4)
                    {
                        hora = agenda.HoraAgenda.Substring(0,2);
                        minuto = agenda.HoraAgenda.Substring(2,2);
                        agenda.HoraAgenda = hora + ":" + minuto;
                    }
                }
                else
                {   if(posdoispontos == 1){
                        hora = "0" + agenda.HoraAgenda.Substring(0,1);
                        minuto = agenda.HoraAgenda.Substring(2, 2);
                        agenda.HoraAgenda = hora + ":" + minuto;
                    }   
                    else if(posdoispontos == 2){
                        hora = agenda.HoraAgenda.Substring(0,2);
                        minuto = agenda.HoraAgenda.Substring(3, 2);
                        agenda.HoraAgenda = hora + ":" + minuto;
                    }
                }

                //altera a DataAgenda para conter a hora
                agenda.DataAgenda = DateTime.Parse(agenda.DataAgenda.ToString("yyyy-MM-dd") + "T" + agenda.HoraAgenda + ":00");

                //verifia se houve Reagendamento
                if((agenda.StatusExPsico != "APTO" && agenda.StatusExPsico != "INAPTO") && dataAgendaAntes != agenda.DataAgenda)
                {
                    agenda.StatusExPsico = "REAGENDADO";
                }

                //altera
                await http.PutAsJsonAsync($"api/agenda/UpdateAgendaById/{agendaId}", agenda);
            }
        }

        //navega de volta para a página index
        navigate.NavigateTo("/", forceLoad: true);            
    }


    /// ----------------------------------------------
    /// <summary>
    /// exclui a agenda mostrada na tela
    /// </summary>
    /// <returns></returns>
    /// ----------------------------------------------
    /// 
    async Task ExcluirAgenda()
    {
        //exclui
        flagSairDaEdicao = true;
        await http.DeleteAsync($"api/agenda/DeleteAgendaById/{agendaId}");
    }

    
    /// ----------------------------------------------
    /// <summary>
    /// retorna a tela anterior
    /// </summary>
    /// <returns></returns>
    /// ----------------------------------------------
    /// 
    void RetornaAgenda()
    {
        //exclui
        flagSairDaEdicao = true;
    }
}
