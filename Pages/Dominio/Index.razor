@page "/dominio"
@inject HttpClient http
@inject NavigationManager navigate
@inject IJSRuntime js

<PageTitle>Domínios</PageTitle>
<h2>Domínios</h2>

<div>
    <!--Novo Dominio chama edição com Id=0 -->
    <a class="btn btn-info float-end" @onclick="@(()=> EditarLinha(0))">
        Novo Domínio"  
    </a>
</div>

@if(dominios == null)
{
    <p>Carregando ...</p>
}
else if(dominios.Length == 0)
{
    <p>Não existem Domínios cadastrados</p>
}
else
{
    //exibir os Domínios
    <table class="table table-hover"  width="100%">
        <thead>
            <tr>
                <th>Sequencia</th> 
                <th>Campo</th>
                <th>Sigla</th>                
                <th>Descrição</th>                           
            </tr>
        </thead>
        <tbody>
            @foreach(var dominio in dominios)
            {   
                <tr @onclick="@(()=> EditarLinha(dominio.Id))"> 
                    <td>@dominio.Sequencia</td>
                    <td>@dominio.Campo</td>
                    <td>@dominio.Sigla</td>
                    <td>@dominio.Descricao</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    //instancia um array da classe "Dominios" no objeto "dominios"
    Dominio[]? dominios { get; set; }
    public int numRender = 0; 

    protected override async Task OnInitializedAsync()
    {
        await CarregaDominios();
    }

    async Task CarregaDominios()
    {
        //ler do banco e carrega o objeto "dominios"
        http.BaseAddress = new Uri("https://localhost:7037/");
        dominios = await http.GetFromJsonAsync<Dominio[]>("api/dominio/GetDominios");
    }

    public async Task EditarLinha(int dominioId)
    {
        await js.InvokeVoidAsync("NavegarPara", $"dominio/editar/{dominioId}");
        await js.InvokeVoidAsync("alert", "ERRO-Não navegou.");               
    }
}
