@page "/relmensal"
@using System.Globalization
@using SiginUser.Models.Consultas
@inject HttpClient http
@inject NavigationManager navigate
@inject IJSRuntime js

<h3>Relatorio Mensal</h3>


@if(flagSairDaEdicao != true)
{
    @if(listDtAgendas != null)
    {
        <div class="page">

            <!---------------------------------------------->
            <!-- Monta Listbox com os meses das agendadas -->    
            <!---------------------------------------------->
            <div>
                @if (listDtAgendas == null)
                {
                    <span>Não existem agendas a serem mostradas.</span>
                }
                else
                {
                    <span>Listar agendas referentes a </span>
                    <select class="form-control-sm" @onchange="@OnChangeDtAgenda" >

                        //ler o array de datas com o "foreach" e monta um listbox(select)
                        <option value="" selected>Selecione uma data</option>
                        @foreach (var dtAgenda in listDtAgendas)
                        {
                            <option value="@dtAgenda.DataAgenda.ToString("yyyy-MM-dd")">
                                @dtAgenda.DataAgenda.ToString("MMMM/yyyy",idioma)
                            </option>
                        }
                    </select>
                }
            </div>

            <!------------------------------------------------------>
            <!--lista os agendamentos marcados na data específica -->
            <!------------------------------------------------------>
            @if (listResumoAgendas != null)
            {
                <div class="row">

                    <!-- Detalhe dos agendamentos  -->
                    <div class="col-sm">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th scope="col">Seq</th>
                                    <th scope="col">Data</th>
                                    <th scope="col">Hora</th>
                                    <th scope="col">Cliente</th>
                                    <th scope="col">Telefone</th>
                                    <th scope="col">Processo</th>
                                    <th scope="col">Obs</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var linAgenda in listResumoAgendas)
                                {
                                    <!--determina a cor da linha de acordo com o status-->
                                    @if(linAgenda.StatusExPsicoSigla == "REALIZADO") trcolor = "forestgreen"; 
                                    else @if(linAgenda.StatusExPsicoSigla == "RETESTE") trcolor = "cadetblue"; 
                                    else @if(linAgenda.StatusExPsicoSigla == "AREALIZAR") trcolor = "black"; 
                                    else @if(linAgenda.StatusExPsicoSigla == "CANCELADO") trcolor = "red"; 
                                    else @if(linAgenda.StatusExPsicoSigla == "REAGENDADO") trcolor = "blue";   
                                
                                    <!--desenha a tabela de linhas da agenda-->
                                    <tr style="color:@trcolor" @onclick="@(()=> EditarLinha(linAgenda.IdAgenda))">
                                        <td>@(numSequencia++)</td>
                                        <td>@linAgenda.DataAgenda.ToString("dd-MM-yyyy")</td>
                                        <td>@linAgenda.HoraAgenda</td>
                                        <td>@linAgenda.NomeCandidato</td>
                                        <td>@linAgenda.Telefone</td>
                                        <td>@linAgenda.TipoProcesso</td>
                                        <td>@if(linAgenda.StatusExPsicoSigla == "REALIZADO")
                                                {<span class="oi oi-thumb-up me-2" aria-hidden="true"> Realizado</span>}
                                            else @if(linAgenda.StatusExPsicoSigla == "RETESTE")
                                                {<span class="oi oi-thumb-down me-2" aria-hidden="true"> Reteste</span>}
                                            else @if(linAgenda.StatusExPsicoSigla == "AREALIZAR")
                                                {<span class="oi oi-target me-2" aria-hidden="true"> A realizar </span>}
                                            else @if(linAgenda.StatusExPsicoSigla == "CANCELADO")
                                                {<span class="oi oi-circle-x me-2" aria-hidden="true"> Cancelado</span>}                                        
                                            else @if(linAgenda.StatusExPsicoSigla == "REAGENDADO")
                                                {<span class="oi oi-loop-circular me-2" aria-hidden="true"> Reagendado</span>}   
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        </div>
    }
}

@code
{
    CultureInfo idioma = new CultureInfo("pt-BR");
    private string TipoPerfil = "Psicólogo";    
    private string CpfProfisional = "19346827807";
    private string UserName = "Fernando Fitipaldi";
    public string mensagemAlerta = "Existem agendamentos marcados hoje para você!";
    public bool flagExibirMensagem = false;
    public bool flagSairDaEdicao = false;   
    public DateTime dataSelecionada;
    public string? trcolor;
    private string? sessionData;
    public int numSequencia = 1;
    private string? dataAgendaLocalStorage;


    [CascadingParameter]
    private Task
    <AuthenticationState> _authState { get; set; }
    private AuthenticationState authState;

    //instancia uma lista da classe "DataAgendas" no objeto "listDtAgendas"
    public DataAgendas[]? listDtAgendas { get; set; }

    //instancia um array do Resumo Agenda no objeto listResumoAgendas
    public ResumoAgendasMes[]? listResumoAgendas { get; set; } 

    /// ---------------------------------------------------------
    /// <summary>
    /// carrega o listbox com as datas das agendas
    /// </summary>
    /// <returns></returns>
    /// ---------------------------------------------------------
    /// 
    protected override async Task OnInitializedAsync()
    {
        //estado de autenticação do usuário
        authState = await _authState;
        if (authState.User.Identity.IsAuthenticated == false)
        {
            navigate.NavigateTo("/Identity/Account/Login", forceLoad: true);
        }
        //carrega as datas das agendas
        await GetMesAgendas();
    }



    /// --------------------------------------------------
    /// <summary>
    /// chama a API para carga dos meses das agendas
    /// </summary>
    /// <returns></returns>
    /// --------------------------------------------------
    /// 
    async Task GetMesAgendas()
    {
        //ler do banco e carrega o objeto "listDtAgendas"
        if (http.BaseAddress == null) { http.BaseAddress = new Uri("https://localhost:7037/"); }
        listDtAgendas = await http.GetFromJsonAsync<DataAgendas[]>($"api/servicos/GetMesAgendasByCpf/{CpfProfisional}");  
    }



    ///--------------------------------------------------------
    /// <summary>
    /// Rotina de troca de datas no listbox
    /// </summary>
    /// <param name="changeEventArgs"></param>
    /// <returns></returns>
    ///--------------------------------------------------------
    ///
    async Task OnChangeDtAgenda(ChangeEventArgs changeEventArgs)
    {
        numSequencia = 1;
        if (changeEventArgs.Value.ToString() != "")
        {
            //recupera a data clicada
            dataSelecionada = Convert.ToDateTime(changeEventArgs.Value.ToString());

            //guarda a data na sessão
            var tempdata = dataSelecionada.ToString("yyyy-MM-dd");
            await js.InvokeVoidAsync("SaveToSessionStorage","dataSelecionadaToList", tempdata);

            //pega as agendas da data selecionada
            await GetResumoAgendasMesByCpfData(CpfProfisional, changeEventArgs.Value.ToString());
        }
    }


    /// -----------------------------------------------
    /// <summary>
    /// Carrega lista de resumos de agendas
    /// </summary>
    /// <param name="cpfProfissional"></param>
    /// <param name="dtAgendaMes"></param>
    /// <returns></returns>
    /// -----------------------------------------------
    /// 
    async Task GetResumoAgendasMesByCpfData(string cpfProfissional, string dtAgendaMes)
    {
        //ler do banco e carrega o array de resumo de agendas
        if (http.BaseAddress == null) { http.BaseAddress = new Uri("https://localhost:7037/"); }
        listResumoAgendas = await http.GetFromJsonAsync<ResumoAgendasMes[]>($"api/servicos/GetResumoAgendasMesByCpfData/{cpfProfissional}/{dtAgendaMes}");  
    }

    /// ----------------------------------------------
    /// <summary>
    /// Editar a linha da agenda clicada
    /// </summary>
    /// <param name="agendaId"></param>
    /// <returns></returns>
    /// -----------------------------------------------
    /// 
    private async Task EditarLinha(int agendaId)
    {
        flagSairDaEdicao = true;
        await js.InvokeVoidAsync("SaveToSessionStorage","rotaretorno","/relmensal");
        navigate.NavigateTo($"agenda/editar/{agendaId}");
    }

    /// ---------------------------------------------------------------
    /// <summary>
    /// Inicializa as variáveis do local store
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    /// ---------------------------------------------------------------
    /// 
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            //recupera data do local storage
            dataAgendaLocalStorage = await js.InvokeAsync<string>("GetFromSessionStorage", "dataAgenda");
            if (dataAgendaLocalStorage == null) dataAgendaLocalStorage = "";

            //await VerificaAgendaParaHoje();
            //await GetResumoAgendasByCpfData(CpfProfisional, dataSelecionada.ToString("yyyy-MM-dd"), dataSelecionada.ToString("yyyy-MM-dd"));

            // avisa ao sistema para renderizar a tela
            StateHasChanged();
        }
    }

}
